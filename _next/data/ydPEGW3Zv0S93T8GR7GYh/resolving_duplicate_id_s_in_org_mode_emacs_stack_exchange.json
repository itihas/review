{"pageProps":{"title":"Resolving duplicate ID's in org-mode - Emacs Stack Exchange","hast":{"type":"root","children":[{"type":"element","tagName":"dl","properties":{},"children":[{"type":"element","tagName":"dt","properties":{},"children":[{"type":"text","value":"url"}]},{"type":"element","tagName":"dd","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://emacs.stackexchange.com/questions/24646/resolving-duplicate-ids-in-org-mode"},"children":[{"type":"text","value":"https://emacs.stackexchange.com/questions/24646/resolving-duplicate-ids-in-org-mode"}]}]}]},{"type":"element","tagName":"pre","properties":{"className":["src-block"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-elisp"]},"children":[{"type":"text","value":"(defun my/org-id-update-id-locations (&optional files silent)\n  \"Scan relevant files for IDs.\nStore the relation between files and corresponding IDs.\nThis will scan all agenda files, all associated archives, and all\nfiles currently mentioned in `org-id-locations'.\nWhen FILES is given, scan these files instead.\"\n  (interactive)\n  (if (not org-id-track-globally)\n      (error \"Please turn on `org-id-track-globally' if you want to track IDs\")\n    (let* ((org-id-search-archives\n        (or org-id-search-archives\n        (and (symbolp org-id-extra-files)\n             (symbol-value org-id-extra-files)\n             (member 'agenda-archives org-id-extra-files))))\n       (files\n        (or files\n        (append\n         ;; Agenda files and all associated archives\n         (org-agenda-files t org-id-search-archives)\n         ;; Explicit extra files\n         (if (symbolp org-id-extra-files)\n             (symbol-value org-id-extra-files)\n           org-id-extra-files)\n         ;; Files associated with live Org buffers\n         (delq nil\n               (mapcar (lambda (b)\n                 (with-current-buffer b\n                   (and (derived-mode-p 'org-mode) (buffer-file-name))))\n                   (buffer-list)))\n         ;; All files known to have IDs\n         org-id-files)))\n       org-agenda-new-buffers\n       file nfiles tfile ids reg found id seen (ndup 0))\n      (when (member 'agenda-archives files)\n    (setq files (delq 'agenda-archives (copy-sequence files))))\n      (setq nfiles (length files))\n      (while (setq file (pop files))\n    (unless silent\n      (message \"Finding ID locations (%d/%d files): %s\"\n           (- nfiles (length files)) nfiles file))\n    (setq tfile (file-truename file))\n    (when (and (file-exists-p file) (not (member tfile seen)))\n      (push tfile seen)\n      (setq ids nil)\n      (with-current-buffer (org-get-agenda-file-buffer file)\n        (save-excursion\n          (save-restriction\n        (widen)\n        (goto-char (point-min))\n        (while (re-search-forward \"^[ \\t]*:ID:[ \\t]+\\\\(\\\\S-+\\\\)[ \\t]*$\"\n                      nil t)\n          (setq id (match-string-no-properties 1))\n          (if (member id found)\n              (progn\n;added logic\n    (if org-clone-delete-id\n                    (org-entry-delete nil \"ID\")\n                  (org-id-get-create t))\n;end of added logic\n            (message \"Duplicate ID \\\"%s\\\", also in file %s\"\n                 id (or (car (delq\n                          nil\n                          (mapcar\n                           (lambda (x)\n                         (if (member id (cdr x))\n                             (car x)))\n                           reg)))\n                    (buffer-file-name)))\n            (when (= ndup 0)\n              (ding)\n              (sit-for 2))\n            (setq ndup (1+ ndup)))\n            (push id found)\n            (push id ids)))\n        (push (cons (abbreviate-file-name file) ids) reg))))))\n      (org-release-buffers org-agenda-new-buffers)\n      (setq org-agenda-new-buffers nil)\n      (setq org-id-locations reg)\n      (setq org-id-files (mapcar 'car org-id-locations))\n      (org-id-locations-save) ;; this function can also handle the alist form\n      ;; now convert to a hash\n      (setq org-id-locations (org-id-alist-to-hash org-id-locations))\n      (if (> ndup 0)\n      (message \"WARNING: %d duplicate IDs found, check *Messages* buffer\" ndup)\n    (message \"%d unique files scanned for IDs\" (length org-id-files)))\n      org-id-locations)))\n"}]}]}]},"filetags":{},"backlinks":[{"path":"/20240822193504-emacs","title":"Emacs"},{"path":"/all_pages","title":"All Pages"}]},"__N_SSG":true}