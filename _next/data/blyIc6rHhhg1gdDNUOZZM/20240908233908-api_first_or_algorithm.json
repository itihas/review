{"pageProps":{"title":"api first, or algorithm?","hast":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Interesting conversation had with Sid today, while we were bashing out the algorithm for "},{"type":"element","tagName":"a","properties":{"href":"/20240905120229-toricelli"},"children":[{"type":"text","value":"Toricelli"}]},{"type":"text","value":": he tends to begin by creating a \"vertically complete\" thing he can tinker with, and I tend to begin by creating the \"engine\" - the \"thing that works\", even if it doesn't hook up to anything yet.\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"But on balance, I think the API is often the marginally useful thing to "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"other people"}]},{"type":"text","value":" - the thing that ooks everything up is modular, because the engine can be switched out for anything with the same type signature. Radically different tools can be built witht he same schema, and the schema invites imagination in a way the algorithm often doesn't. Is this generally true? It's certainly true for Toricelli, and for SuperMemo and other SRS tools, and for my "},{"type":"element","tagName":"a","properties":{"href":"/20230816114251-how_does_the_notebook_work"},"children":[{"type":"text","value":"notebook"}]},{"type":"text","value":" more generally: any number of ranking/queuing/ordering philosophies can be plugged into the general idea. Conversely, it's far more likely that folks will have opinions and particularities around the setting for the implementation than it will be that they care whether the ranking system I use for myself will work for them at first blush. I think something like this effect is what contributes to so much of extant code being ways to control how various pieces talk to each other, as opposed to what they are saying. Code is mostly a guess at what part of a process or task can be systematized, and the pipeline is a sexy place to start.\nA related phenonmenon: API-ish code is something LLMs make good guesses at. It's the easy stuff, the boilerplate.\nThis could be nonsense. But it's a fun thing to track.\nRelated: "},{"type":"element","tagName":"a","properties":{"href":"/20220715011054-poetry_of_structuralism"},"children":[{"type":"text","value":"poetics of structuralism"}]}]}]},"filetags":{},"backlinks":[{"path":"/all_pages","title":"All Pages"}]},"__N_SSG":true}